#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# JavaScript ES6

[Reference Link](https://www.w3schools.com/js/js_es6.asp)

CMAScript 2015 was the second major revision to JavaScript.

ECMAScript 2015 is also known as ES6 and ECMAScript 6.

This chapter describes the most important features of ES6.

**`New features in ES6`**

* The let keyword
* The const keyword
* Arrow Functions
* The ... Operator
* For/of
* Map Objects
* Set Objects
* Classes
* Promises
* Symbol
* Default Parameters
* Function Rest Parameter
* String.includes()
* String.startsWith()
* String.endsWith()
* Array.from()
* Array keys()
* Array find()
* Array findIndex()
* New Math Methods
* New Number Properties
* New Number Methods
* New Global Methods
* Object entries
* JavaScript Modules

#!markdown

## JavaScript let

The `let` keyword allows you to declare a variable with block scope.

#!javascript

console.log(`1. Before define x variable ->  ${x}`);
var x = 20;
console.log(`2. After define x -> ${x}`);

{
    // console.log(`3. Enter into a block, and before define x variable -> ${x}`);
    let x = 10;
    console.log(`4. After define x variable -> ${x} at block.`);
}

console.log(`5. Check x variable out of block -> ${x}`);

#!markdown

Read more about let in the chapter: [JavaScript Let](https://www.w3schools.com/js/js_let.asp).

Jedi: Ê≥®ÊÑèÁõ¥Êé•ÊâìÂºÄÊ≠•È™§3ÁöÑÊ≥®Èáä‰ºö‰∫ßÁîüÁºñËØëÈîôËØØÔºÅÈó¥Êé•ËØ¥Êòé‰∫ÜvarÂÆö‰πâÊòØÂÖ®Â±ÄÁöÑ„ÄÇÂÖ∂ÂØπÂ∫îÁöÑÈîôËØØ‰ø°ÊÅØÊòØ `Error: Cannot access 'x' before initialization`„ÄÇ

#!markdown

## JavaScript const

The const keyword allows you to declare a constant (a JavaScript variable with a constant value).

Constants are similar to let variables, except that the value cannot be changed.

#!javascript

var x = 20;
console.log(`1. After define a global variable -> x=${x}`);
{
    const x = 10;
    console.log(`2. After define a block variable -> x=${x}`);
}
console.log(`3. Check x variable out of block -> x=${x}`);

#!markdown

Read more about `const` in the chapter: [JavaScript Const](https://www.w3schools.com/js/js_const.asp).

Jedi: ËÆ©ÊàëÊúÄ‰∏çËÉΩÁêÜËß£ÁöÑÊòØconstËøôÁé©ÊÑèÂèØ‰ª•Êé•ÂèóÈùûÂü∫Êú¨Á±ªÂûãÁöÑÂÆö‰πâ„ÄÇ

#!markdown

## Arrow Functions

Arrow functions allows a short syntax for writing function expressions.

You don't need the function keyword, the return keyword, and the curly brackets.

#!javascript

// ES5
var x1 = function(x, y) {
   return x * y;
}

// ES6
const x2 = (x, y) => x * y;

console.log(x1(2,2));
console.log(x2(2,2));
console.log(x1);
console.log(typeof x1);
console.log(x2);
console.log(typeof x2);

#!markdown

Arrow functions do not have their own `this`. They are not well suited for defining `object` methods.

Arrow functions are not hoisted. They must be defined before they are used.

Using `const` is safer than using `var`, because a function expression is always a constant value.

You can only omit the `return` keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:

#!javascript

const x = (x, y) => { return x * y };
console.log(2, 3);
console.log(x);
console.log(typeof x);

#!markdown

### The Spread (...) Operator

The `...` operator expands an iterable (like an array) into more elements:

#!javascript

const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];

const year = [...q1, ...q2, ...q3, ...q4];
console.log(year);
console.log(typeof year);

#!markdown

Jedi: you can check this [link](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax).

The `...` operator can be used to expand an iterable into more arguments for function calls:

#!javascript

const numbers = [23,55,21,87,56];
let maxValue = Math.max(...numbers);
console.log(maxValue);

// Jedi remark.
const iterator = [...numbers];
console.log(typeof iterator);
console.log(iterator instanceof Array);

#!markdown

Jedi: You can write a function to accept spread parameter. That means use spread operator to pass an array as a parameter at function prototype.

#!javascript

function sum(...args) {
    let total = 0;    
    for (let arg of args) total += arg;
    return total;
}

console.log(sum(1, 2, 3));
console.log(sum(1, 2, 3, 4, 5, 6));

#!markdown

## The For/Of Loop

The JavaScript `for/of` statement loops through the values of an iterable objects.

`for/of` lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more.

The `for/of` loop has the following syntax:

#!javascript

const names = ['Jedi','Lin','Jian']
for (name of names) {
    console.log(name);
}

#!markdown

*variable* - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.

*iterable* - An object that has iterable properties.

#!markdown

### Looping over an Array

#!javascript

const cars = ["BMW", "Volvo", "Mini"];
let text = "";
for (let x of cars) {
    text += x + " ";
}
console.log(text);

#!markdown

### Looping over a String

#!javascript

let language = "JavaScript";
let text = "";
for (let x of language) {
    text += x + " ";
}
console.log(text);

#!markdown

Learn more in the chapter: JavaScript Loop [For/In/Of](https://www.w3schools.com/js/js_loop_forin.asp).

#!markdown

## JavaScript Maps

Being able to use an Object as a key is an important Map feature.

#!javascript

const fruits = new Map([
    ["apples", 500],
    ["bananas", 300],
    ["oranges", 200]
]);

#!markdown

Learn more about Map objects, and the difference between a Map and an Array, in the the chapter: [JavaScript Maps](https://www.w3schools.com/js/js_object_maps.asp).

[MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)

#!markdown

## JavaScript Sets

#!javascript

// Create a Set
const letters = new Set();

// Add some values to the Set
// letters.add("c");
letters.add("a")
letters.add("b")
letters.add("c")
// letters.add("c")

let text = "";
for (let letter of letters)
    text += letter;
console.log(text);

#!markdown

Learn more about Set objects in the the chapter: [JavaScript Sets](https://www.w3schools.com/js/js_object_sets.asp).

[MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)

#!markdown

## JavaScript Classes

JavaScript Classes are templates for JavaScript Objects.

Use the keyword `class` to create a class.

Always add a method named `constructor()`:


```js
class ClassName {
  constructor() { ... }
}
```

#!javascript

class Car {
    constructor(name, year) {
        this.name = name;
        this.year = year;
    }
}
let car = new Car("Ford Escort", 1990);
console.log(car.name);
console.log(car.year);

#!markdown

Jedi: ËøôÁßçÂÜôÊ≥ïÊõ¥‰∏∫Ëá™ÁÑ∂ÔºÅÊØî‰ΩøÁî®ÂéüÂûãÊñπÊ≥ïË¶ÅËàíÊúçÂæàÂ§öÔºàÂàùÂ≠¶ËÄÖÊâçËøô‰πàÂπ≤ÔºÅüòÇüòÇÔºâ„ÄÇ

The example above creates a class named "Car".

The class has two initial properties: "name" and "year".

A JavaScript class is not an object.

It is a template for JavaScript objects.

#!markdown

### Using a Class

When you have a class, you can use the class to create objects:

#!javascript

class Car {
    constructor(name, year) {
        this.name = name;
        this.year = year;
    }
}
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);
console.log(`${myCar1.name}, ${myCar1.year}`);
console.log(`${myCar2.name}, ${myCar2.year}`);

#!markdown

Learn more about classes in the the chapter: [JavaScript Classes](https://www.w3schools.com/js/js_classes.asp).

[MDN Reference](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes)

#!markdown

## JavaScript Promises

A Promise is a JavaScript object that links "Producing Code" and "Consuming Code".

"Producing Code" can take some time and "Consuming Code" must wait for the result.

**`Promise Syntax`**

```js
const myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise).
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);
```

#!markdown

**`Example Using a Promise`**

#!html

<html>
    <body>
        <div id="demo"></div>
        <script>
            const myPromise = new Promise(function(myResolve, myReject) {
                setTimeout(function() { myResolve("I love You !!"); }, 2000);
            });
          
            myPromise.then(function(value) {
              document.getElementById("demo").innerHTML = value;
              console.log("output for prove success.");
            });
        </script>
    </body>
</html>

#!javascript

// ‰ΩøÁî®ÂõûË∞ÉÂÆûÁé∞‰∏Ä‰∏™ÂºÇÊ≠•Êìç‰ΩúÔºå‰æãÂ¶Ç‰∏Ä‰∏™ÁÆÄÂçïÁöÑËæìÂá∫„ÄÇ
// File: CallbackDemo.js
// Execute: node CallbackDemo.js
setTimeout(() => {
    console.log("Output a message from call back function.");
}, 2000);
console.log("ü§£ So, if you look at me.");

////////////////////////////////////////////
// Output
// ü§£ So, if you look at me.
// Output a message from call back function.

#!javascript

// ÂõûË∞ÉÂú∞Áã±Áâà
// File: callback_hell.js
// Execute: node callback_hell.js
setTimeout(()=>{
    console.log("Task 2");
    setTimeout(()=>{
        console.log("Task 3");
        setTimeout(()=>{
            console.log("Task 4");
        }, 3000);
    }, 2000);
}, 1000);
console.log("Task 1");

////////////////////////////////////////////
// Output
// PS D:\> node .\callback_hell.js
// Task 1
// Task 2
// Task 3
// Task 4

#!markdown

Learn more about Promises in the the chapter: [JavaScript Promises](https://www.w3schools.com/js/js_promise.asp).

[MDN Reference - Promise](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)

Jedi: PromiseÊòØ‰∏™ÈùûÂ∏∏Â§çÊùÇÁöÑÂØπË±°ÔºåÈúÄË¶Å‰∏ìÈ¢òÂ≠¶‰π†„ÄÇ

#!markdown

## The Symbol Type

A JavaScript Symbol is a primitive datatype just like Number, String, or Boolean.

It represents a unique "hidden" identifier that no other code can accidentally access.

For instance, if different coders want to add a person.id property to a person object belonging to a third-party code, they could mix each others values.

Using `Symbol()` to create a unique identifiers, solves this problem:

#!javascript

const person = {
    firstName: "John",
    lastName: "Doe",
    age: 50,
    eyeColor: "blue"
};

let id = Symbol('id');
person[id] = 140353;
console.log(person[id]); // Now person[id] = 140353
console.log(person.id);  // but person.id is still undefined

#!markdown

### Note

Symbols are always unique.

If you create two symbols with the same description they will have different values:

#!javascript

console.log(Symbol("id") == Symbol("id")); // false

#!markdown

## Default Parameter Values

ES6 allows function parameters to have default values.

#!javascript

function myFunction(x, y = 10) {
    // y is 10 if not passed or undefined
    return x + y;
}
let myFunc = (x, y=10) => x + y;

let tmp = myFunction(5); // will return 15
let tmp2 = myFunc(5);
console.log(tmp, tmp2);

#!markdown

## Function Rest Parameter

The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:

#!javascript

function sum(...args) {
    let sum = 0;
    for (let arg of args) sum += arg;
    return sum;
}

let x = sum(4, 9, 16, 25, 29, 100, 66, 77);
console.log(x);

#!markdown

## String.includes()

The `includes()` method returns `true` if a string contains a specified value, otherwise `false`:

#!javascript

let text = "Hello world, welcome to the universe.";
console.log(text.includes("world"));    // Returns true
console.log(text.includes("jedi"));  // return false

#!markdown

## String.startsWith()

The `startsWith()` method returns `true` if a string begins with a specified value, otherwise `false`:

#!javascript

let text = "Hello world, welcome to the universe.";
console.log(text.startsWith("Hello"));  // returns true
console.log(text.startsWith("World"));  // returns false

#!markdown

## String.endsWith()

The `endsWith()` method returns `true` if a string ends with a specified value, otherwise `false`:

#!javascript

var text = "John Doe";
console.log(text.endsWith("Doe"));  // returns true
console.log(text.endsWith("Sam"));  // returns false

#!markdown

## Array.from()

The `Array.from()` method returns an Array object from any object with a length property or any iterable object.

#!javascript

let text = "ABCDEFG";
console.log(Array.from(text));

#!markdown

## Array keys()

The `keys()` method returns an Array Iterator object with the keys of an array.

#!javascript

// Create an Array Iterator object, containing the keys of the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();
console.log(typeof keys);
console.log(typeof keys[Symbol.iterator]);
for (let key of keys)
    console.log(`${key}, ${fruits[key]}`);
